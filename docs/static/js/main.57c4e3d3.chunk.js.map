{"version":3,"sources":["store/GoogleAuthStore.ts","store/VotesStore.ts","store/index.ts","components/Layout.tsx","components/GoogleAuthentication.tsx","components/BottomNavMenu.tsx","components/MainView.tsx","components/AddMeasurementView.tsx","index.tsx","store/configureStore.ts","App.tsx"],"names":["GoogleAuthStatus","UserLoginStatus","actionCreators","vote","dispatch","getState","appState","undefined","googleAuth","email","fetch","method","then","response","json","data","type","numVotes","unloadedState","defaultState","libraryInitializationStatus","Loading","userLoginStatus","LoggedOut","username","jwtToken","reducers","state","incomingAction","Initializing","Ready","signInAction","LoggedIn","votes","props","children","GoogleAuthentication","googleLoadTimer","onSuccess","bind","signOut","renderGoogleButton","this","setInterval","gapi","clearInterval","setInitializing","initGoogle","setReady","GoogleAuthStore","renderLoggedOut","renderLoggedIn","signin2","render","width","height","onsuccess","id","className","setTimeout","onClick","googleUser","profile","getBasicProfile","token","getAuthResponse","id_token","signIn","getEmail","getGivenName","func","load","auth2","init","client_id","scope","getAuthInstance","console","log","React","connect","BottomNavMenu","to","MainView","xxx","addVote","options","chart","toolbar","show","animations","enabled","xaxis","categories","stroke","dashArray","legend","position","offsetY","series","name","renderValidationPeriodMessage","VotesStore","PlanView","startDate","Date","handleChange","date","setState","htmlFor","selected","onChange","locale","pl","dateFormat","step","baseUrl","document","getElementsByTagName","getAttribute","store","history","initialState","middleware","thunk","routerMiddleware","rootReducer","combineReducers","router","connectRouter","createStore","composeWithDevTools","applyMiddleware","configureStore","createBrowserHistory","basename","ReactDOM","Layout","exact","path","component","AddMeasurementView","getElementById"],"mappings":"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","file":"static/js/main.57c4e3d3.chunk.js","sourcesContent":["import { Action, Reducer } from 'redux';\r\n\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport enum GoogleAuthStatus {\r\n    /**\r\n     * The Google API has not been loaded so we cannot initialize it nor call API methods\r\n     */\r\n    Loading,\r\n    /**\r\n     * The Google API has successfully loaded, but is not initialized yet\r\n     */\r\n    Initializing,\r\n    /**\r\n     * The Google API has been successfully initialized and is available\r\n     */\r\n    Ready\r\n}\r\n\r\nexport enum UserLoginStatus {\r\n    LoggedOut,\r\n    LoggedIn\r\n}\r\n\r\nexport interface IGoogleAuthState {\r\n    libraryInitializationStatus: GoogleAuthStatus;\r\n    userLoginStatus: UserLoginStatus;\r\n    email: string | null;\r\n    username: string | null;\r\n    jwtToken: string | null;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n// Use @typeName and isActionType for type detection that works even after serialization/deserialization.\r\n\r\nexport interface ISetInitializingAction {\r\n    type: 'AUTH_SET_INITIALIZING'\r\n}\r\n\r\nexport interface ISetReadyAction {\r\n    type: 'AUTH_SET_READY'\r\n}\r\n\r\nexport interface ISignOutAction {\r\n    type: 'AUTH_SIGN_OUT'\r\n}\r\n\r\nexport interface ISignInAction {\r\n    type: 'AUTH_SIGN_IN';\r\n    email: string;\r\n    username: string;\r\n    jwtToken: string;\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\nexport type KnownAuthAction = ISetInitializingAction | ISetReadyAction | ISignOutAction | ISignInAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    setInitializing: () => ({ type: 'AUTH_SET_INITIALIZING' } as ISetInitializingAction),\r\n    setReady: () => ({ type: 'AUTH_SET_READY' } as ISetReadyAction),\r\n    signOut: () => ({ type: 'AUTH_SIGN_OUT' } as ISignOutAction),\r\n    signIn: (email: string, username: string, jwtToken: string) => ({\r\n            type: 'AUTH_SIGN_IN',\r\n            email: email,\r\n            username: username,\r\n            jwtToken: jwtToken,\r\n        } as ISignInAction),\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst defaultState: IGoogleAuthState = {\r\n    libraryInitializationStatus: GoogleAuthStatus.Loading,\r\n    userLoginStatus: UserLoginStatus.LoggedOut,\r\n    email: null,\r\n    username: null,\r\n    jwtToken: null,\r\n};\r\n\r\nexport const reducer: Reducer<IGoogleAuthState> =\r\n    (state: IGoogleAuthState | undefined, incomingAction: Action): IGoogleAuthState => {\r\n        if (state === undefined) {\r\n            return defaultState;\r\n        }\r\n\r\n        const action = incomingAction as KnownAuthAction;\r\n\r\n        switch (action.type) {\r\n        case 'AUTH_SET_INITIALIZING':\r\n            return {\r\n                libraryInitializationStatus: GoogleAuthStatus.Initializing,\r\n                userLoginStatus: UserLoginStatus.LoggedOut,\r\n                email: null,\r\n                username: null,\r\n                jwtToken: null\r\n            };\r\n        case 'AUTH_SET_READY':\r\n        case 'AUTH_SIGN_OUT':\r\n            return {\r\n                libraryInitializationStatus: GoogleAuthStatus.Ready,\r\n                userLoginStatus: UserLoginStatus.LoggedOut,\r\n                email: null,\r\n                username: null,\r\n                jwtToken: null\r\n            };\r\n        case 'AUTH_SIGN_IN':\r\n            const signInAction = incomingAction as ISignInAction;\r\n            return {\r\n                libraryInitializationStatus: GoogleAuthStatus.Ready,\r\n                userLoginStatus: UserLoginStatus.LoggedIn,\r\n                email: signInAction.email,\r\n                username: signInAction.username,\r\n                jwtToken: signInAction.jwtToken\r\n            };\r\n        default:\r\n            return state;\r\n        }\r\n    };","import { Action, Reducer } from 'redux';\r\nimport { IAppThunkAction as AppThunkAction } from './';\r\n// -----------------\r\n// STATE - This defines the type of data maintained in the Redux store.\r\n\r\nexport interface IVotesState {\r\n    numVotes: number;\r\n}\r\n\r\n// -----------------\r\n// ACTIONS - These are serializable (hence replayable) descriptions of state transitions.\r\n// They do not themselves have any side-effects; they just describe something that is going to happen.\r\n\r\ninterface IRequestVoteAction {\r\n    type: 'REQUEST_VOTE';\r\n    email: string;\r\n}\r\n\r\ninterface IReceiveVoteResultAction {\r\n    type: 'RECEIVE_NUM_VOTES';\r\n    numVotes: number;\r\n}\r\n\r\n// Declare a 'discriminated union' type. This guarantees that all references to 'type' properties contain one of the\r\n// declared type strings (and not any other arbitrary string).\r\ntype KnownAction = IRequestVoteAction | IReceiveVoteResultAction;\r\n\r\n// ----------------\r\n// ACTION CREATORS - These are functions exposed to UI components that will trigger a state transition.\r\n// They don't directly mutate state, but they can have external side-effects (such as loading data).\r\n\r\nexport const actionCreators = {\r\n    vote: (): AppThunkAction<KnownAction> => (dispatch, getState) => {\r\n        const appState = getState();\r\n        if (appState.googleAuth !== undefined && appState.googleAuth.email !== null) {\r\n            const email = appState.googleAuth.email;\r\n            // Only load data if it's something we don't already have (and are not already loading)\r\n            fetch(`https://tauritcdncounter.azurewebsites.net/api/WeightTrackerVotes?email=${email}`, { method: 'POST' })\r\n                .then(response => response.json() as Promise<number>)\r\n                .then(data => {\r\n                    dispatch({ type: 'RECEIVE_NUM_VOTES', numVotes: data });\r\n                });\r\n\r\n            dispatch({ type: 'REQUEST_VOTE', email: email});\r\n        }\r\n        \r\n    }\r\n};\r\n\r\n// ----------------\r\n// REDUCER - For a given state and action, returns the new state. To support time travel, this must not mutate the old state.\r\n\r\nconst unloadedState: IVotesState = { numVotes: 0 };\r\n\r\nexport const reducer: Reducer<IVotesState> = (state: IVotesState | undefined, incomingAction: Action): IVotesState => {\r\n    if (state === undefined) {\r\n        return unloadedState;\r\n    }\r\n\r\n    const action = incomingAction as KnownAction;\r\n    switch (action.type) {\r\n        case 'REQUEST_VOTE':\r\n            return state;\r\n        case 'RECEIVE_NUM_VOTES':\r\n            const receiveVoteResult = incomingAction as IReceiveVoteResultAction;\r\n\r\n            return {\r\n                numVotes: receiveVoteResult.numVotes\r\n            };\r\n            default: \r\n                return unloadedState;\r\n    }\r\n};\r\n","import * as VotesStore from './VotesStore';\r\nimport * as GoogleAuthStore from './GoogleAuthStore';\r\n\r\n// The top-level state object\r\nexport interface IApplicationState {\r\n    googleAuth: GoogleAuthStore.IGoogleAuthState | undefined;\r\n    votes: VotesStore.IVotesState | undefined;\r\n}\r\n\r\n// Whenever an action is dispatched, Redux will update each top-level application state property using\r\n// the reducer with the matching name. It's important that the names match exactly, and that the reducer\r\n// acts on the corresponding ApplicationState property type.\r\nexport const reducers = {\r\n    googleAuth: GoogleAuthStore.reducer,\r\n    votes: VotesStore.reducer\r\n};\r\n\r\n// This type can be used as a hint on action creators so that its 'dispatch' and 'getState' params are\r\n// correctly typed to match your store.\r\nexport interface IAppThunkAction<TAction> {\r\n    (dispatch: (action: TAction) => void, getState: () => IApplicationState): void;\r\n}\r\n","import * as React from 'react';\r\n\r\nexport default (props: { children?: React.ReactNode }) => (\r\n    <React.Fragment>\r\n        {props.children}\r\n    </React.Fragment>\r\n);\r\n","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { IApplicationState } from '../store/index';\r\nimport * as GoogleAuthStore from '../store/GoogleAuthStore';\r\nimport './GoogleAuthentication.scss';\r\n\r\ntype GoogleAuthenticationProps = GoogleAuthStore.IGoogleAuthState &\r\n    typeof GoogleAuthStore.actionCreators;\r\n\r\nconst googleAuthFeatureEnabled = true; // allows to quickly disable this feature during development\r\nconst googleButtonId = 'google-sign-in-button';\r\nconst googleApiAvailabilityProbingIntervalMs = 90;\r\n\r\nclass GoogleAuthentication extends React.Component<GoogleAuthenticationProps> {\r\n    googleLoadTimer: any;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.onSuccess = this.onSuccess.bind(this);\r\n        this.signOut = this.signOut.bind(this);\r\n        this.renderGoogleButton = this.renderGoogleButton.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.googleLoadTimer = setInterval(() => {\r\n                if (!googleAuthFeatureEnabled) {\r\n                    // shortcut\r\n                    clearInterval(this.googleLoadTimer);\r\n                    //this.props.setInitializing();\r\n                    //this.props.setReady(); // dont do it, as then render() will try to render a sign in button \r\n                    return;\r\n                }\r\n\r\n                if (gapi) {\r\n                    clearInterval(this.googleLoadTimer);\r\n                    this.props.setInitializing();\r\n\r\n                    this.initGoogle(() => {\r\n                        this.props.setReady();\r\n                    });\r\n                }\r\n            },\r\n            googleApiAvailabilityProbingIntervalMs);\r\n    }\r\n\r\n    render() {\r\n        //return this.renderLoggedOutMock();\r\n\r\n        // ReSharper disable once JsUnreachableCode temporary\r\n        if (this.props.userLoginStatus === GoogleAuthStore.UserLoginStatus.LoggedOut) {\r\n            return this.renderLoggedOut();\r\n        } else {\r\n            return this.renderLoggedIn();\r\n        }\r\n    }\r\n\r\n    renderGoogleButton() {\r\n        if (this.props.libraryInitializationStatus === GoogleAuthStore.GoogleAuthStatus.Ready) {\r\n            gapi.signin2.render(\r\n                googleButtonId,\r\n                {\r\n                    width: 150,\r\n                    height: 40,\r\n                    onsuccess: this.onSuccess,\r\n                },\r\n            );\r\n        }\r\n    }\r\n\r\n    renderLoggedOutMock() {\r\n        return (\r\n            <div id=\"google-auth-box\">\r\n                <a className=\"btn btn-sm btn-light\">Wyloguj</a>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderLoggedOut() {\r\n        setTimeout(this.renderGoogleButton, 0);\r\n\r\n        return (\r\n            <div id=\"google-auth-box\">\r\n                <div id={googleButtonId}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderLoggedIn() {\r\n        return (\r\n            <div id=\"google-auth-box\">\r\n                <a className=\"btn btn-sm btn-nopadding\" onClick={this.signOut} >Wyloguj</a>\r\n            </div>\r\n        );\r\n    }\r\n    //<span className=\"google-auth-box-user\">Hej {this.props.username}!</span>\r\n\r\n    private onSuccess(googleUser: any) {\r\n        const profile = googleUser.getBasicProfile();\r\n        const token = googleUser.getAuthResponse().id_token;\r\n        this.props.signIn(profile.getEmail(), profile.getGivenName(), token);\r\n    }\r\n\r\n\r\n    private initGoogle(func: any) {\r\n        gapi.load('auth2',\r\n            () => {\r\n                gapi.auth2\r\n                    .init({\r\n                        client_id:\r\n                            '868879046273-u84c4daseb9i1i8d61j200pau7ish7pb.apps.googleusercontent.com',\r\n                        scope: 'profile email',\r\n                    })\r\n                    .then(func);\r\n            });\r\n    }\r\n\r\n\r\n    private signOut() {\r\n        const auth2 = gapi.auth2.getAuthInstance();\r\n        auth2.signOut().then(() => {\r\n            console.log('User signed out.');\r\n            this.props.signOut();\r\n        });\r\n    }\r\n\r\n};\r\n\r\nexport default connect(\r\n    (state: IApplicationState) => state.googleAuth,\r\n    GoogleAuthStore.actionCreators\r\n)(GoogleAuthentication);","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport GoogleAuthentication from './GoogleAuthentication';\r\nimport * as Index from '../store/index';\r\nimport * as GoogleAuthStore from '../store/GoogleAuthStore';\r\nimport { connect } from 'react-redux';\r\n\r\ntype BottomNavMenuPropsProps = GoogleAuthStore.IGoogleAuthState;\r\n\r\nclass BottomNavMenu extends React.Component<BottomNavMenuPropsProps> {\r\n\r\n    render() {\r\n        return (\r\n            <nav id=\"bottom-bar\">\r\n                <GoogleAuthentication />\r\n                {/*this.props.userLoginStatus === GoogleAuthStore.UserLoginStatus.LoggedOut\r\n                    ? this.renderLoggedOut()\r\n                    : this.renderLoggedIn()\r\n                */}\r\n            </nav>\r\n        );\r\n    }\r\n\r\n    private renderLoggedOut() {\r\n        return (<React.Fragment>\r\n            <GoogleAuthentication />\r\n        </React.Fragment>);\r\n    }\r\n\r\n    private renderLoggedIn() {\r\n        return (<Link to=\"/add-measurement\" className=\"btn btn-info\">Dodaj pomiar</Link>);\r\n    }\r\n\r\n}\r\n\r\nexport default connect(\r\n    (state: Index.IApplicationState) => state.googleAuth\r\n)(BottomNavMenu);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Props } from 'react-apexcharts';\r\nimport ReactApexChart from 'react-apexcharts';\r\nimport BottomNavMenu from './BottomNavMenu';\r\nimport * as Index from '../store/index';\r\nimport * as GoogleAuthStore from '../store/GoogleAuthStore';\r\nimport * as VotesStore from '../store/VotesStore';\r\nimport './MainView.scss';\r\n\r\ntype MainViewProps = Index.IApplicationState & typeof VotesStore.actionCreators;\r\n\r\nclass MainView extends React.Component<MainViewProps> {\r\n    private xxx: Props;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.addVote = this.addVote.bind(this);\r\n\r\n        this.xxx = {\r\n            options: {\r\n                chart: {\r\n                    id: 'basic-bar',\r\n                    toolbar: {\r\n                        show: false\r\n                    },\r\n                    animations: {\r\n                        enabled: false\r\n                    }\r\n                },\r\n                xaxis: {\r\n                    categories: [\r\n                        '5 tygodni temu', '4 tygodnie temu', '3 tygodnie temu', '2 tygodnie temu', 'tydzień temu',\r\n                        'dziś'\r\n                    ]\r\n                },\r\n                stroke: {\r\n                    width: [5, 3],\r\n                    dashArray: [0, 5]\r\n                },\r\n                legend: {\r\n                    show: true,\r\n                    position: 'bottom',\r\n                    offsetY: -10\r\n                }\r\n            },\r\n            series: [\r\n                {\r\n                    name: 'Twoja waga (przykład)',\r\n                    data: [60, 60.1, 60.9, 60.7, 61.1, null],\r\n                },\r\n                {\r\n                    name: 'Optymalny przyrost',\r\n                    data: [60, 60.34, 60.68, 61.02, 61.36, 61.7],\r\n\r\n                }\r\n            ]\r\n        };\r\n    }\r\n\r\n    render(): any {\r\n\r\n        if (this.props.googleAuth !== undefined) {\r\n            return (\r\n                <React.Fragment>\r\n                    <div id=\"weight-tracker-chart-container\">\r\n                        <ReactApexChart\r\n                            options={this.xxx.options}\r\n                            series={this.xxx.series}\r\n                            type=\"line\"/>\r\n                    </div>\r\n\r\n                    {this.props.googleAuth.userLoginStatus === GoogleAuthStore.UserLoginStatus.LoggedIn\r\n                        ? this.renderValidationPeriodMessage()\r\n                        : null}\r\n                    <BottomNavMenu/>\r\n                </React.Fragment>\r\n            );\r\n        }\r\n        return null;\r\n\r\n    };\r\n\r\n    private renderValidationPeriodMessage() {\r\n        if (this.props.votes !== undefined) {\r\n            return (<div className=\"validation-period\">\r\n                        <p>Śledzenie wagi nie jest jeszcze dostępne.</p>\r\n\r\n                        <p>Możesz <strong>zagłosować za dodaniem tej opcji</strong>. Gdy liczba głosów przekroczy 50, to funkcja zostanie dodana :)</p>\r\n\r\n                        {this.props.votes.numVotes > 0\r\n                            ? <div className=\"number-of-votes-box\">Liczba głosów: <strong>{this.props.votes.numVotes\r\n                            }</strong><br />\r\n                        Dzięki!:)</div>\r\n                            : null}\r\n\r\n                        <button className=\"btn btn-primary\" onClick={this.addVote}>Dodaj głos ode mnie!</button>\r\n                    </div>\r\n            );\r\n        }\r\n        return null;\r\n    }\r\n\r\n    addVote(): any {\r\n        this.props.vote();\r\n    }\r\n}\r\n\r\nexport default connect(\r\n    (state: Index.IApplicationState) => state,\r\n    VotesStore.actionCreators\r\n)(MainView);","import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\nimport './AddMeasurementView.scss';\r\nimport pl from 'date-fns/locale/pl';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass PlanView extends React.Component {\r\n    state = {\r\n        startDate: new Date()\r\n    };\r\n\r\n    handleChange = (date: Date) => {\r\n        this.setState({\r\n            startDate: date\r\n        });\r\n    };\r\n\r\n    render(): any {\r\n        return (\r\n            <div>\r\n                <form id=\"add-measurement-form\">\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"weightDatePicker\">Data pomiaru</label><br />\r\n                        <DatePicker\r\n                            id=\"weightDatePicker\"\r\n                            selected={this.state.startDate}\r\n                            onChange={this.handleChange}\r\n                            locale={pl}\r\n                            dateFormat=\"yyyy-MM-dd\"\r\n                            className=\"form-control\"/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"weight-input\">Waga</label>\r\n                        <input type=\"number\" step=\"0.1\" className=\"form-control\" id=\"weight-input\"/>\r\n                    </div>\r\n                    <button type=\"submit\" id=\"save-weight\" className=\"btn btn-primary\">Zapisz wagę</button>\r\n                    <Link to=\"/\" className=\"btn btn-warning \">Anuluj</Link>\r\n                </form>\r\n                \r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(PlanView);\r\n","//import 'bootstrap/dist/css/bootstrap.css';\r\n//import './jakprzytyc-bundle.css';\r\n\r\n// ReSharper disable once UnusedLocalImport\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { MemoryRouter } from 'react-router';\r\nimport { createBrowserHistory } from 'history';\r\nimport configureStore from './store/configureStore';\r\nimport App from './App';\r\n\r\n// Create browser history to use in the Redux store\r\nconst baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\r\nconst history = createBrowserHistory({ basename: baseUrl });\r\n\r\n// Get the application-wide store instance, prepopulating with state from the server where available.\r\nconst store = configureStore(history);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <MemoryRouter>\r\n            <App />\r\n        </MemoryRouter>\r\n    </Provider>,\r\n    document.getElementById('weight-tracker-widget'));\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { History } from 'history';\r\nimport { IApplicationState as ApplicationState, reducers } from './';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default function configureStore(history: History, initialState?: ApplicationState) {\r\n    const middleware = [\r\n        thunk,\r\n        routerMiddleware(history)\r\n    ];\r\n\r\n    const rootReducer = combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        composeWithDevTools(applyMiddleware(...middleware))\r\n    );\r\n}\r\n","// ReSharper disable once UnusedLocalImport\r\nimport * as React from 'react';\r\nimport { Route } from 'react-router';\r\nimport Layout from './components/Layout';\r\nimport MainView from './components/MainView';\r\nimport AddMeasurementView from './components/AddMeasurementView';\r\n\r\nimport './custom.scss'\r\n\r\nexport default () => (\r\n    <Layout>\r\n        <Route exact path=\"/\" component={MainView} />\r\n        <Route path=\"/add-measurement\" component={AddMeasurementView} />\r\n    </Layout>\r\n);\r\n"],"sourceRoot":""}